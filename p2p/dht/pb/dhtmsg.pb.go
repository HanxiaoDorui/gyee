// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dhtmsg.proto

/*
	Package dhtmsg_pb is a generated protocol buffer package.

	It is generated from these files:
		dhtmsg.proto

	It has these top-level messages:
		DhtMessage
*/
package dhtmsg_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DhtMessage_MessageType int32

const (
	DhtMessage_FINDNODE        DhtMessage_MessageType = 0
	DhtMessage_NEIGHBORS       DhtMessage_MessageType = 1
	DhtMessage_PUTVALUE        DhtMessage_MessageType = 2
	DhtMessage_GETVALUE_REQ    DhtMessage_MessageType = 3
	DhtMessage_GETVALUE_RSP    DhtMessage_MessageType = 4
	DhtMessage_PUTPROVIDER     DhtMessage_MessageType = 5
	DhtMessage_GETPROVIDER_REQ DhtMessage_MessageType = 6
	DhtMessage_GETPROVIDER_RSP DhtMessage_MessageType = 7
	DhtMessage_PING            DhtMessage_MessageType = 8
	DhtMessage_PONG            DhtMessage_MessageType = 9
)

var DhtMessage_MessageType_name = map[int32]string{
	0: "FINDNODE",
	1: "NEIGHBORS",
	2: "PUTVALUE",
	3: "GETVALUE_REQ",
	4: "GETVALUE_RSP",
	5: "PUTPROVIDER",
	6: "GETPROVIDER_REQ",
	7: "GETPROVIDER_RSP",
	8: "PING",
	9: "PONG",
}
var DhtMessage_MessageType_value = map[string]int32{
	"FINDNODE":        0,
	"NEIGHBORS":       1,
	"PUTVALUE":        2,
	"GETVALUE_REQ":    3,
	"GETVALUE_RSP":    4,
	"PUTPROVIDER":     5,
	"GETPROVIDER_REQ": 6,
	"GETPROVIDER_RSP": 7,
	"PING":            8,
	"PONG":            9,
}

func (x DhtMessage_MessageType) Enum() *DhtMessage_MessageType {
	p := new(DhtMessage_MessageType)
	*p = x
	return p
}
func (x DhtMessage_MessageType) String() string {
	return proto.EnumName(DhtMessage_MessageType_name, int32(x))
}
func (x *DhtMessage_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DhtMessage_MessageType_value, data, "DhtMessage_MessageType")
	if err != nil {
		return err
	}
	*x = DhtMessage_MessageType(value)
	return nil
}
func (DhtMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDhtmsg, []int{0, 0}
}

type DhtMessage_ConnectionType int32

const (
	DhtMessage_CONT_NO     DhtMessage_ConnectionType = 0
	DhtMessage_CONT_YES    DhtMessage_ConnectionType = 1
	DhtMessage_CONT_MAY    DhtMessage_ConnectionType = 2
	DhtMessage_CONT_FAILED DhtMessage_ConnectionType = 3
)

var DhtMessage_ConnectionType_name = map[int32]string{
	0: "CONT_NO",
	1: "CONT_YES",
	2: "CONT_MAY",
	3: "CONT_FAILED",
}
var DhtMessage_ConnectionType_value = map[string]int32{
	"CONT_NO":     0,
	"CONT_YES":    1,
	"CONT_MAY":    2,
	"CONT_FAILED": 3,
}

func (x DhtMessage_ConnectionType) Enum() *DhtMessage_ConnectionType {
	p := new(DhtMessage_ConnectionType)
	*p = x
	return p
}
func (x DhtMessage_ConnectionType) String() string {
	return proto.EnumName(DhtMessage_ConnectionType_name, int32(x))
}
func (x *DhtMessage_ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DhtMessage_ConnectionType_value, data, "DhtMessage_ConnectionType")
	if err != nil {
		return err
	}
	*x = DhtMessage_ConnectionType(value)
	return nil
}
func (DhtMessage_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDhtmsg, []int{0, 1}
}

type DhtMessage struct {
	MsgType          *DhtMessage_MessageType    `protobuf:"varint,1,req,name=msgType,enum=dhtmsg.pb.DhtMessage_MessageType" json:"msgType,omitempty"`
	FindNode         *DhtMessage_FindNode       `protobuf:"bytes,2,opt,name=findNode" json:"findNode,omitempty"`
	Neighbors        *DhtMessage_Neighbors      `protobuf:"bytes,3,opt,name=neighbors" json:"neighbors,omitempty"`
	PutValue         *DhtMessage_PutValue       `protobuf:"bytes,4,opt,name=putValue" json:"putValue,omitempty"`
	GetValueReq      *DhtMessage_GetValueReq    `protobuf:"bytes,5,opt,name=getValueReq" json:"getValueReq,omitempty"`
	GetValueRsp      *DhtMessage_GetValueRsp    `protobuf:"bytes,6,opt,name=getValueRsp" json:"getValueRsp,omitempty"`
	PutProvider      *DhtMessage_PutProvider    `protobuf:"bytes,7,opt,name=putProvider" json:"putProvider,omitempty"`
	GutProviderReq   *DhtMessage_GetProviderReq `protobuf:"bytes,8,opt,name=gutProviderReq" json:"gutProviderReq,omitempty"`
	GutProviderRsp   *DhtMessage_GetProviderRsp `protobuf:"bytes,9,opt,name=gutProviderRsp" json:"gutProviderRsp,omitempty"`
	Ping             *DhtMessage_Ping           `protobuf:"bytes,10,opt,name=ping" json:"ping,omitempty"`
	Pong             *DhtMessage_Pong           `protobuf:"bytes,11,opt,name=pong" json:"pong,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *DhtMessage) Reset()                    { *m = DhtMessage{} }
func (m *DhtMessage) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage) ProtoMessage()               {}
func (*DhtMessage) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0} }

func (m *DhtMessage) GetMsgType() DhtMessage_MessageType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return DhtMessage_FINDNODE
}

func (m *DhtMessage) GetFindNode() *DhtMessage_FindNode {
	if m != nil {
		return m.FindNode
	}
	return nil
}

func (m *DhtMessage) GetNeighbors() *DhtMessage_Neighbors {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

func (m *DhtMessage) GetPutValue() *DhtMessage_PutValue {
	if m != nil {
		return m.PutValue
	}
	return nil
}

func (m *DhtMessage) GetGetValueReq() *DhtMessage_GetValueReq {
	if m != nil {
		return m.GetValueReq
	}
	return nil
}

func (m *DhtMessage) GetGetValueRsp() *DhtMessage_GetValueRsp {
	if m != nil {
		return m.GetValueRsp
	}
	return nil
}

func (m *DhtMessage) GetPutProvider() *DhtMessage_PutProvider {
	if m != nil {
		return m.PutProvider
	}
	return nil
}

func (m *DhtMessage) GetGutProviderReq() *DhtMessage_GetProviderReq {
	if m != nil {
		return m.GutProviderReq
	}
	return nil
}

func (m *DhtMessage) GetGutProviderRsp() *DhtMessage_GetProviderRsp {
	if m != nil {
		return m.GutProviderRsp
	}
	return nil
}

func (m *DhtMessage) GetPing() *DhtMessage_Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *DhtMessage) GetPong() *DhtMessage_Pong {
	if m != nil {
		return m.Pong
	}
	return nil
}

type DhtMessage_Node struct {
	IP               []byte                     `protobuf:"bytes,1,req,name=IP" json:"IP,omitempty"`
	UDP              *uint32                    `protobuf:"varint,2,req,name=UDP" json:"UDP,omitempty"`
	TCP              *uint32                    `protobuf:"varint,3,req,name=TCP" json:"TCP,omitempty"`
	NodeId           []byte                     `protobuf:"bytes,4,req,name=NodeId" json:"NodeId,omitempty"`
	ConnType         *DhtMessage_ConnectionType `protobuf:"varint,5,req,name=ConnType,enum=dhtmsg.pb.DhtMessage_ConnectionType" json:"ConnType,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *DhtMessage_Node) Reset()                    { *m = DhtMessage_Node{} }
func (m *DhtMessage_Node) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_Node) ProtoMessage()               {}
func (*DhtMessage_Node) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 0} }

func (m *DhtMessage_Node) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *DhtMessage_Node) GetUDP() uint32 {
	if m != nil && m.UDP != nil {
		return *m.UDP
	}
	return 0
}

func (m *DhtMessage_Node) GetTCP() uint32 {
	if m != nil && m.TCP != nil {
		return *m.TCP
	}
	return 0
}

func (m *DhtMessage_Node) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *DhtMessage_Node) GetConnType() DhtMessage_ConnectionType {
	if m != nil && m.ConnType != nil {
		return *m.ConnType
	}
	return DhtMessage_CONT_NO
}

type DhtMessage_Value struct {
	Key              []byte `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Val              []byte `protobuf:"bytes,2,req,name=Val" json:"Val,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DhtMessage_Value) Reset()                    { *m = DhtMessage_Value{} }
func (m *DhtMessage_Value) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_Value) ProtoMessage()               {}
func (*DhtMessage_Value) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 1} }

func (m *DhtMessage_Value) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_Value) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

type DhtMessage_Provider struct {
	Key              []byte           `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Node             *DhtMessage_Node `protobuf:"bytes,2,req,name=Node" json:"Node,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DhtMessage_Provider) Reset()                    { *m = DhtMessage_Provider{} }
func (m *DhtMessage_Provider) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_Provider) ProtoMessage()               {}
func (*DhtMessage_Provider) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 2} }

func (m *DhtMessage_Provider) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_Provider) GetNode() *DhtMessage_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type DhtMessage_FindNode struct {
	From             *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Target           []byte           `protobuf:"bytes,3,req,name=Target" json:"Target,omitempty"`
	Id               *uint64          `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte           `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DhtMessage_FindNode) Reset()                    { *m = DhtMessage_FindNode{} }
func (m *DhtMessage_FindNode) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_FindNode) ProtoMessage()               {}
func (*DhtMessage_FindNode) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 3} }

func (m *DhtMessage_FindNode) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_FindNode) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_FindNode) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *DhtMessage_FindNode) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_FindNode) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Neighbors struct {
	From             *DhtMessage_Node   `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node   `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Nodes            []*DhtMessage_Node `protobuf:"bytes,3,rep,name=Nodes" json:"Nodes,omitempty"`
	Id               *uint64            `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte             `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *DhtMessage_Neighbors) Reset()                    { *m = DhtMessage_Neighbors{} }
func (m *DhtMessage_Neighbors) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_Neighbors) ProtoMessage()               {}
func (*DhtMessage_Neighbors) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 4} }

func (m *DhtMessage_Neighbors) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_Neighbors) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_Neighbors) GetNodes() []*DhtMessage_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DhtMessage_Neighbors) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_Neighbors) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_PutValue struct {
	From             *DhtMessage_Node    `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node    `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Values           []*DhtMessage_Value `protobuf:"bytes,3,rep,name=Values" json:"Values,omitempty"`
	Id               *uint64             `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte              `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *DhtMessage_PutValue) Reset()                    { *m = DhtMessage_PutValue{} }
func (m *DhtMessage_PutValue) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_PutValue) ProtoMessage()               {}
func (*DhtMessage_PutValue) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 5} }

func (m *DhtMessage_PutValue) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_PutValue) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_PutValue) GetValues() []*DhtMessage_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *DhtMessage_PutValue) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_PutValue) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetValueReq struct {
	From             *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Keys             [][]byte         `protobuf:"bytes,3,rep,name=Keys" json:"Keys,omitempty"`
	Id               *uint64          `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte           `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DhtMessage_GetValueReq) Reset()                    { *m = DhtMessage_GetValueReq{} }
func (m *DhtMessage_GetValueReq) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_GetValueReq) ProtoMessage()               {}
func (*DhtMessage_GetValueReq) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 6} }

func (m *DhtMessage_GetValueReq) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetValueReq) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetValueReq) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *DhtMessage_GetValueReq) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetValueReq) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetValueRsp struct {
	From             *DhtMessage_Node    `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node    `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Values           []*DhtMessage_Value `protobuf:"bytes,3,rep,name=Values" json:"Values,omitempty"`
	Id               *uint64             `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte              `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *DhtMessage_GetValueRsp) Reset()                    { *m = DhtMessage_GetValueRsp{} }
func (m *DhtMessage_GetValueRsp) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_GetValueRsp) ProtoMessage()               {}
func (*DhtMessage_GetValueRsp) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 7} }

func (m *DhtMessage_GetValueRsp) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetValues() []*DhtMessage_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *DhtMessage_GetValueRsp) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetValueRsp) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_PutProvider struct {
	From             *DhtMessage_Node       `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node       `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Providers        []*DhtMessage_Provider `protobuf:"bytes,3,rep,name=Providers" json:"Providers,omitempty"`
	Id               *uint64                `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte                 `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DhtMessage_PutProvider) Reset()                    { *m = DhtMessage_PutProvider{} }
func (m *DhtMessage_PutProvider) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_PutProvider) ProtoMessage()               {}
func (*DhtMessage_PutProvider) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 8} }

func (m *DhtMessage_PutProvider) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_PutProvider) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_PutProvider) GetProviders() []*DhtMessage_Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *DhtMessage_PutProvider) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_PutProvider) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetProviderReq struct {
	From             *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Key              [][]byte         `protobuf:"bytes,3,rep,name=key" json:"key,omitempty"`
	Id               *uint64          `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte           `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DhtMessage_GetProviderReq) Reset()         { *m = DhtMessage_GetProviderReq{} }
func (m *DhtMessage_GetProviderReq) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_GetProviderReq) ProtoMessage()    {}
func (*DhtMessage_GetProviderReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDhtmsg, []int{0, 9}
}

func (m *DhtMessage_GetProviderReq) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetProviderReq) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetProviderReq) GetKey() [][]byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DhtMessage_GetProviderReq) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetProviderReq) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_GetProviderRsp struct {
	From             *DhtMessage_Node       `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node       `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Providers        []*DhtMessage_Provider `protobuf:"bytes,3,rep,name=Providers" json:"Providers,omitempty"`
	Id               *uint64                `protobuf:"varint,4,req,name=Id" json:"Id,omitempty"`
	Extra            []byte                 `protobuf:"bytes,5,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DhtMessage_GetProviderRsp) Reset()         { *m = DhtMessage_GetProviderRsp{} }
func (m *DhtMessage_GetProviderRsp) String() string { return proto.CompactTextString(m) }
func (*DhtMessage_GetProviderRsp) ProtoMessage()    {}
func (*DhtMessage_GetProviderRsp) Descriptor() ([]byte, []int) {
	return fileDescriptorDhtmsg, []int{0, 10}
}

func (m *DhtMessage_GetProviderRsp) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetProviders() []*DhtMessage_Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *DhtMessage_GetProviderRsp) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_GetProviderRsp) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Ping struct {
	From             *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Id               *uint64          `protobuf:"varint,3,req,name=Id" json:"Id,omitempty"`
	Extra            []byte           `protobuf:"bytes,4,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DhtMessage_Ping) Reset()                    { *m = DhtMessage_Ping{} }
func (m *DhtMessage_Ping) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_Ping) ProtoMessage()               {}
func (*DhtMessage_Ping) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 11} }

func (m *DhtMessage_Ping) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_Ping) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_Ping) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_Ping) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type DhtMessage_Pong struct {
	From             *DhtMessage_Node `protobuf:"bytes,1,req,name=From" json:"From,omitempty"`
	To               *DhtMessage_Node `protobuf:"bytes,2,req,name=To" json:"To,omitempty"`
	Id               *uint64          `protobuf:"varint,3,req,name=Id" json:"Id,omitempty"`
	Extra            []byte           `protobuf:"bytes,4,opt,name=Extra" json:"Extra,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DhtMessage_Pong) Reset()                    { *m = DhtMessage_Pong{} }
func (m *DhtMessage_Pong) String() string            { return proto.CompactTextString(m) }
func (*DhtMessage_Pong) ProtoMessage()               {}
func (*DhtMessage_Pong) Descriptor() ([]byte, []int) { return fileDescriptorDhtmsg, []int{0, 12} }

func (m *DhtMessage_Pong) GetFrom() *DhtMessage_Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DhtMessage_Pong) GetTo() *DhtMessage_Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DhtMessage_Pong) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DhtMessage_Pong) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*DhtMessage)(nil), "dhtmsg.pb.DhtMessage")
	proto.RegisterType((*DhtMessage_Node)(nil), "dhtmsg.pb.DhtMessage.Node")
	proto.RegisterType((*DhtMessage_Value)(nil), "dhtmsg.pb.DhtMessage.Value")
	proto.RegisterType((*DhtMessage_Provider)(nil), "dhtmsg.pb.DhtMessage.Provider")
	proto.RegisterType((*DhtMessage_FindNode)(nil), "dhtmsg.pb.DhtMessage.FindNode")
	proto.RegisterType((*DhtMessage_Neighbors)(nil), "dhtmsg.pb.DhtMessage.Neighbors")
	proto.RegisterType((*DhtMessage_PutValue)(nil), "dhtmsg.pb.DhtMessage.PutValue")
	proto.RegisterType((*DhtMessage_GetValueReq)(nil), "dhtmsg.pb.DhtMessage.GetValueReq")
	proto.RegisterType((*DhtMessage_GetValueRsp)(nil), "dhtmsg.pb.DhtMessage.GetValueRsp")
	proto.RegisterType((*DhtMessage_PutProvider)(nil), "dhtmsg.pb.DhtMessage.PutProvider")
	proto.RegisterType((*DhtMessage_GetProviderReq)(nil), "dhtmsg.pb.DhtMessage.GetProviderReq")
	proto.RegisterType((*DhtMessage_GetProviderRsp)(nil), "dhtmsg.pb.DhtMessage.GetProviderRsp")
	proto.RegisterType((*DhtMessage_Ping)(nil), "dhtmsg.pb.DhtMessage.Ping")
	proto.RegisterType((*DhtMessage_Pong)(nil), "dhtmsg.pb.DhtMessage.Pong")
	proto.RegisterEnum("dhtmsg.pb.DhtMessage_MessageType", DhtMessage_MessageType_name, DhtMessage_MessageType_value)
	proto.RegisterEnum("dhtmsg.pb.DhtMessage_ConnectionType", DhtMessage_ConnectionType_name, DhtMessage_ConnectionType_value)
}
func (m *DhtMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgType == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.MsgType))
	}
	if m.FindNode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.FindNode.Size()))
		n1, err := m.FindNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Neighbors != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Neighbors.Size()))
		n2, err := m.Neighbors.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PutValue != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.PutValue.Size()))
		n3, err := m.PutValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.GetValueReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GetValueReq.Size()))
		n4, err := m.GetValueReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GetValueRsp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GetValueRsp.Size()))
		n5, err := m.GetValueRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PutProvider != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.PutProvider.Size()))
		n6, err := m.PutProvider.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.GutProviderReq != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GutProviderReq.Size()))
		n7, err := m.GutProviderReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GutProviderRsp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.GutProviderRsp.Size()))
		n8, err := m.GutProviderRsp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Ping != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Ping.Size()))
		n9, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Pong != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Pong.Size()))
		n10, err := m.Pong.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.UDP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.UDP))
	}
	if m.TCP == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.TCP))
	}
	if m.NodeId == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.ConnType == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.ConnType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Val == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Provider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Provider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Node == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.Node.Size()))
		n11, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_FindNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_FindNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n12, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n13, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Target == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Neighbors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Neighbors) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n14, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n15, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_PutValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_PutValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n16, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n17, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetValueReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n18, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n19, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetValueRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetValueRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n20, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n21, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_PutProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_PutProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n22, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n23, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.Providers) > 0 {
		for _, msg := range m.Providers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetProviderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetProviderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n24, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n25, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.Key) > 0 {
		for _, b := range m.Key {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_GetProviderRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_GetProviderRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n26, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n27, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if len(m.Providers) > 0 {
		for _, msg := range m.Providers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDhtmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n28, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n29, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DhtMessage_Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DhtMessage_Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.From.Size()))
		n30, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.To == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(m.To.Size()))
		n31, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Id == nil {
		return 0, new(proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(*m.Id))
	}
	if m.Extra != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDhtmsg(dAtA, i, uint64(len(m.Extra)))
		i += copy(dAtA[i:], m.Extra)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDhtmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DhtMessage) Size() (n int) {
	var l int
	_ = l
	if m.MsgType != nil {
		n += 1 + sovDhtmsg(uint64(*m.MsgType))
	}
	if m.FindNode != nil {
		l = m.FindNode.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Neighbors != nil {
		l = m.Neighbors.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.PutValue != nil {
		l = m.PutValue.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GetValueReq != nil {
		l = m.GetValueReq.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GetValueRsp != nil {
		l = m.GetValueRsp.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.PutProvider != nil {
		l = m.PutProvider.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GutProviderReq != nil {
		l = m.GutProviderReq.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.GutProviderRsp != nil {
		l = m.GutProviderRsp.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Node) Size() (n int) {
	var l int
	_ = l
	if m.IP != nil {
		l = len(m.IP)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.UDP != nil {
		n += 1 + sovDhtmsg(uint64(*m.UDP))
	}
	if m.TCP != nil {
		n += 1 + sovDhtmsg(uint64(*m.TCP))
	}
	if m.NodeId != nil {
		l = len(m.NodeId)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.ConnType != nil {
		n += 1 + sovDhtmsg(uint64(*m.ConnType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Value) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Val != nil {
		l = len(m.Val)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Provider) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_FindNode) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Target != nil {
		l = len(m.Target)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Neighbors) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_PutValue) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetValueReq) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetValueRsp) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_PutProvider) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetProviderReq) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Key) > 0 {
		for _, b := range m.Key {
			l = len(b)
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_GetProviderRsp) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovDhtmsg(uint64(l))
		}
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Ping) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DhtMessage_Pong) Size() (n int) {
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovDhtmsg(uint64(*m.Id))
	}
	if m.Extra != nil {
		l = len(m.Extra)
		n += 1 + l + sovDhtmsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDhtmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDhtmsg(x uint64) (n int) {
	return sovDhtmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DhtMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DhtMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DhtMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var v DhtMessage_MessageType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DhtMessage_MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MsgType = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FindNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FindNode == nil {
				m.FindNode = &DhtMessage_FindNode{}
			}
			if err := m.FindNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Neighbors == nil {
				m.Neighbors = &DhtMessage_Neighbors{}
			}
			if err := m.Neighbors.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutValue == nil {
				m.PutValue = &DhtMessage_PutValue{}
			}
			if err := m.PutValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetValueReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetValueReq == nil {
				m.GetValueReq = &DhtMessage_GetValueReq{}
			}
			if err := m.GetValueReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetValueRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetValueRsp == nil {
				m.GetValueRsp = &DhtMessage_GetValueRsp{}
			}
			if err := m.GetValueRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutProvider == nil {
				m.PutProvider = &DhtMessage_PutProvider{}
			}
			if err := m.PutProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GutProviderReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GutProviderReq == nil {
				m.GutProviderReq = &DhtMessage_GetProviderReq{}
			}
			if err := m.GutProviderReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GutProviderRsp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GutProviderRsp == nil {
				m.GutProviderRsp = &DhtMessage_GetProviderRsp{}
			}
			if err := m.GutProviderRsp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ping == nil {
				m.Ping = &DhtMessage_Ping{}
			}
			if err := m.Ping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pong == nil {
				m.Pong = &DhtMessage_Pong{}
			}
			if err := m.Pong.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Node) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UDP = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCP", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TCP = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnType", wireType)
			}
			var v DhtMessage_ConnectionType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (DhtMessage_ConnectionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnType = &v
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Value) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Provider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &DhtMessage_Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_FindNode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Neighbors) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Neighbors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Neighbors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &DhtMessage_Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_PutValue) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DhtMessage_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetValueReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetValueRsp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetValueRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetValueRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DhtMessage_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_PutProvider) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &DhtMessage_Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetProviderReq) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProviderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProviderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, make([]byte, postIndex-iNdEx))
			copy(m.Key[len(m.Key)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_GetProviderRsp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProviderRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProviderRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &DhtMessage_Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Ping) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DhtMessage_Pong) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &DhtMessage_Node{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &DhtMessage_Node{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhtmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhtmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhtmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDhtmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDhtmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhtmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDhtmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDhtmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDhtmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDhtmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDhtmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dhtmsg.proto", fileDescriptorDhtmsg) }

var fileDescriptorDhtmsg = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x6e, 0xda, 0x58,
	0x14, 0x8e, 0x7f, 0x00, 0x73, 0xec, 0x90, 0xab, 0x3b, 0xa3, 0x19, 0x8b, 0x91, 0x98, 0x4c, 0x34,
	0x8b, 0x68, 0x46, 0x42, 0xa3, 0xcc, 0xae, 0x3f, 0x52, 0x13, 0x30, 0xd4, 0x0d, 0x31, 0xee, 0x8d,
	0x41, 0xca, 0x2a, 0x22, 0xc5, 0x75, 0x50, 0x13, 0xdb, 0xc1, 0x4e, 0x55, 0xde, 0xa0, 0x0f, 0xd0,
	0x45, 0xf7, 0xcd, 0xae, 0x0f, 0x51, 0x55, 0xea, 0xa2, 0x9b, 0x4a, 0xe9, 0x1b, 0x54, 0xe9, 0x8b,
	0x54, 0xf7, 0xda, 0x06, 0x03, 0x21, 0xf1, 0x86, 0xaa, 0x5d, 0x71, 0xce, 0xe1, 0xfb, 0xce, 0xfd,
	0xbe, 0xeb, 0x7b, 0x8f, 0x0d, 0x4a, 0xff, 0x38, 0x3c, 0x0d, 0x9c, 0xaa, 0x3f, 0xf4, 0x42, 0x0f,
	0x17, 0x93, 0xec, 0x68, 0xe3, 0xf3, 0xef, 0x00, 0xf5, 0xe3, 0x70, 0xcf, 0x0e, 0x82, 0x9e, 0x63,
	0xe3, 0xbb, 0x50, 0x38, 0x0d, 0x1c, 0x6b, 0xe4, 0xdb, 0x2a, 0xb7, 0xce, 0x6f, 0x96, 0xb6, 0xfe,
	0xaa, 0x8e, 0xb1, 0xd5, 0x09, 0xae, 0x1a, 0xff, 0x52, 0x20, 0x49, 0x18, 0xf8, 0x0e, 0x48, 0x4f,
	0x07, 0x6e, 0xdf, 0xf0, 0xfa, 0xb6, 0xca, 0xaf, 0x73, 0x9b, 0xf2, 0x56, 0xe5, 0x7a, 0x76, 0x23,
	0x46, 0x91, 0x31, 0x1e, 0xdf, 0x87, 0xa2, 0x6b, 0x0f, 0x9c, 0xe3, 0x23, 0x6f, 0x18, 0xa8, 0x02,
	0x23, 0xff, 0x79, 0x3d, 0xd9, 0x48, 0x60, 0x64, 0xc2, 0xa0, 0x4b, 0xfb, 0xe7, 0x61, 0xb7, 0x77,
	0x72, 0x6e, 0xab, 0xe2, 0x4d, 0x4b, 0x9b, 0x31, 0x8a, 0x8c, 0xf1, 0xb8, 0x06, 0xb2, 0x63, 0xc7,
	0x55, 0xfb, 0x4c, 0xcd, 0x31, 0xfa, 0x02, 0xdf, 0xcd, 0x09, 0x90, 0xa4, 0x59, 0x53, 0x4d, 0x02,
	0x5f, 0xcd, 0x67, 0x6a, 0x12, 0xf8, 0x24, 0xcd, 0xa2, 0x4d, 0xfc, 0xf3, 0xd0, 0x1c, 0x7a, 0xcf,
	0x07, 0x7d, 0x7b, 0xa8, 0x16, 0x6e, 0x6a, 0x62, 0x4e, 0x80, 0x24, 0xcd, 0xc2, 0x2d, 0x28, 0x39,
	0xa9, 0xff, 0xec, 0x33, 0x55, 0x62, 0x7d, 0xfe, 0x5e, 0x28, 0x26, 0x85, 0x25, 0x33, 0xdc, 0xd9,
	0x6e, 0x81, 0xaf, 0x16, 0xb3, 0x76, 0x0b, 0x7c, 0x32, 0xc3, 0xc5, 0x55, 0x10, 0xfd, 0x81, 0xeb,
	0xa8, 0xc0, 0x7a, 0x94, 0x17, 0x38, 0x1b, 0xb8, 0x0e, 0x61, 0x38, 0x86, 0xf7, 0x5c, 0x47, 0x95,
	0x6f, 0xc4, 0x7b, 0x0c, 0xef, 0xb9, 0x4e, 0xf9, 0x15, 0x07, 0x22, 0x3b, 0x4e, 0x25, 0xe0, 0x75,
	0x93, 0x1d, 0x61, 0x85, 0xf0, 0xba, 0x89, 0x11, 0x08, 0x9d, 0xba, 0xa9, 0xf2, 0xeb, 0xfc, 0xe6,
	0x2a, 0xa1, 0x21, 0xad, 0x58, 0x35, 0x53, 0x15, 0xa2, 0x8a, 0x55, 0x33, 0xf1, 0x6f, 0x90, 0xa7,
	0x5c, 0xbd, 0xaf, 0x8a, 0x8c, 0x17, 0x67, 0xf8, 0x01, 0x48, 0x35, 0xcf, 0x75, 0xd9, 0xa5, 0xc8,
	0xb1, 0x4b, 0xb1, 0xc0, 0x3c, 0x45, 0xd9, 0x4f, 0xc2, 0x81, 0xc7, 0xb0, 0x64, 0xcc, 0x2a, 0xff,
	0x0b, 0xb9, 0xe8, 0xa8, 0x21, 0x10, 0x76, 0xed, 0x51, 0xac, 0x8b, 0x86, 0xb4, 0xd2, 0xed, 0x9d,
	0x30, 0x61, 0x0a, 0xa1, 0x61, 0xb9, 0x05, 0xd2, 0xf8, 0x59, 0xce, 0xe3, 0xab, 0x91, 0x41, 0x46,
	0x58, 0xb8, 0x23, 0xec, 0x6e, 0x31, 0x5c, 0xf9, 0x82, 0x03, 0x29, 0xb9, 0x6e, 0x94, 0xdc, 0x18,
	0x7a, 0xa7, 0xac, 0xdf, 0x2d, 0x64, 0x8a, 0xc3, 0xff, 0x00, 0x6f, 0x79, 0x19, 0x96, 0xe2, 0x2d,
	0x8f, 0xee, 0x9e, 0xd5, 0x1b, 0x3a, 0x76, 0xc8, 0xb6, 0x54, 0x21, 0x71, 0xc6, 0x9e, 0x44, 0xb4,
	0xa3, 0x22, 0xe1, 0xf5, 0x3e, 0xfe, 0x15, 0x72, 0xda, 0x8b, 0x70, 0xd8, 0x63, 0xf7, 0x4c, 0x21,
	0x51, 0x52, 0x7e, 0xc7, 0x41, 0x71, 0x7c, 0xb1, 0x97, 0xaa, 0xf3, 0x3f, 0xc8, 0xd1, 0x98, 0x0e,
	0x19, 0xe1, 0x16, 0x78, 0x04, 0xcc, 0xe8, 0xe0, 0x3d, 0x07, 0x52, 0x32, 0x5c, 0x96, 0x6a, 0xe0,
	0x7f, 0xc8, 0xb3, 0x45, 0x12, 0x07, 0x7f, 0x5c, 0x8f, 0x8f, 0x86, 0x4a, 0x0c, 0xcd, 0xe8, 0xe1,
	0x0d, 0x07, 0x72, 0x6a, 0xc2, 0x2d, 0xd5, 0x06, 0x06, 0x71, 0xd7, 0x1e, 0x45, 0x26, 0x14, 0xc2,
	0xe2, 0x8c, 0x2a, 0x3f, 0xa4, 0x55, 0x46, 0x43, 0xe5, 0x67, 0xdc, 0xec, 0x4f, 0x1c, 0xc8, 0xa9,
	0x21, 0xbe, 0x54, 0x1b, 0xf7, 0xa0, 0x98, 0xac, 0x93, 0x38, 0x59, 0xf4, 0x7e, 0x4c, 0xa6, 0xf5,
	0x84, 0x90, 0xd1, 0xcf, 0x05, 0x07, 0xa5, 0xe9, 0x97, 0xc9, 0x52, 0x2d, 0x21, 0x10, 0x9e, 0xd9,
	0xa3, 0xf8, 0xf8, 0xd0, 0x30, 0xa3, 0xcc, 0xcb, 0x19, 0x99, 0x4b, 0x3e, 0x40, 0xdf, 0x63, 0xe7,
	0x5f, 0x72, 0x20, 0x9a, 0xf1, 0xeb, 0x72, 0x69, 0x46, 0x22, 0x29, 0xc2, 0xbc, 0x14, 0x71, 0x4e,
	0x8a, 0xf7, 0x23, 0x48, 0xd9, 0x78, 0xcb, 0x81, 0x9c, 0xfa, 0x4c, 0xc5, 0x0a, 0x48, 0x0d, 0xdd,
	0xa8, 0x1b, 0xed, 0xba, 0x86, 0x56, 0xf0, 0x2a, 0x14, 0x0d, 0x4d, 0x6f, 0x3e, 0xdc, 0x69, 0x93,
	0x7d, 0xc4, 0xd1, 0x3f, 0xcd, 0x8e, 0xd5, 0xdd, 0x6e, 0x75, 0x34, 0xc4, 0x63, 0x04, 0x4a, 0x53,
	0x8b, 0xb2, 0x43, 0xa2, 0x3d, 0x46, 0xc2, 0x74, 0x65, 0xdf, 0x44, 0x22, 0x5e, 0x03, 0xd9, 0xec,
	0x58, 0x26, 0x69, 0x77, 0xf5, 0xba, 0x46, 0x50, 0x0e, 0xff, 0x02, 0x6b, 0x4d, 0x6d, 0x5c, 0x60,
	0xbc, 0xfc, 0x5c, 0x71, 0xdf, 0x44, 0x05, 0x2c, 0x81, 0x68, 0xea, 0x46, 0x13, 0x49, 0x2c, 0x6a,
	0x1b, 0x4d, 0x54, 0xdc, 0x78, 0x04, 0xa5, 0xe9, 0xcf, 0x07, 0x2c, 0x43, 0xa1, 0xd6, 0x36, 0xac,
	0x43, 0xa3, 0x8d, 0x56, 0xa8, 0x3e, 0x96, 0x1c, 0x68, 0xb1, 0x5a, 0x96, 0xed, 0x6d, 0x1f, 0x20,
	0x9e, 0x2a, 0x61, 0x59, 0x63, 0x5b, 0x6f, 0x69, 0x75, 0x24, 0xec, 0xa0, 0x8f, 0x57, 0x15, 0xee,
	0xf2, 0xaa, 0xc2, 0x7d, 0xb9, 0xaa, 0x70, 0xaf, 0xbf, 0x56, 0x56, 0xbe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xff, 0x2c, 0xf1, 0xa4, 0xff, 0x0b, 0x00, 0x00,
}
